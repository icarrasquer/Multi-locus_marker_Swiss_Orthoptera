################################################
#title           : Obtaining consensus sequences
#description     : This script combine all scripts for the analyses to obtain the consensus sequences of (i) UCE and USCO, (ii) mitogenome, (iii) COI barcode and (iv) rDNA. 
#author	         : InÃ©s Carrasquer Puyal
#email	         : ines.carrasquer@unige.ch
#date            : 20.01.2025
################################################

### Obtain UCE and USCO 

### Map the samples and filter

for i in Genome_ref1 Genome_ref2
    do
    grep ${i} list_sample_mapping | cut  -f1 | sort -u > temp
    while read a 
        do
        bwa mem ../${i}/${i}*.fasta clean_demux-${a}_R1_.paired.fastq clean_demux-${a}_R2_.paired.fastq > ${i}-${a}.sam
        samtools flagstat ${i}-${a}.sam > ${i}-${a}.sam.txt
	    samtools view -h -b -S ${i}-${a}.sam > ${i}-${a}.bam
        name=$(echo ${i}-${a})
        samtools view -bF 4 -q 20 ${i}-${a}.bam > ${i}-${a}_q20.bam
        rm ${i}-${a}.bam
        samtools addreplacerg -r "@RG\tID:${i}-${a}\tSM:${i}-${a}" ${i}-${a}_q20.bam > ${i}-${a}_q20_rg.bam
        rm ${i}-${a}_q20.bam
        samtools sort ${i}-${a}_q20_rg.bam > ${i}-${a}_q20_rg_sorted.bam
        samtools flagstat ${i}-${a}_q20_rg_sorted.bam > ${i}-${a}_q20_rg_sorted.bam.txt
	    rm ${i}-${a}_q20_rg.bam
        done < temp
    done

#Obtain shared loci between individuals. Define minimum coverage and bam to bed  

for i in Genome_ref1 Genome_ref2
    do
    grep ${i}  list_sample_mapping | cut -f1  > temp
    while read a
        do
        file=$(echo ${i}-${a}_q20_rg_sorted)
        #Obtain bed file per sample
        bedtools genomecov -bga -ibam ${file}.bam | awk '$4 > 3' | sort -V -k1,1 -k2,2n | bedtools merge > ${file}.bed
        if [ ${i} = Schistocerca ]
            then
            samtools view -h ${file}.bam -L not_working.bed | samtools sort > temp.bam
            bedtools genomecov -bga -ibam temp.bam | awk '$4 > 3' | sort -V -k1,1 -k2,2n | bedtools merge >> ${file}.bed
            fi
        done < temp
    #Bed reference for the genome reference with unique code for every loci
    cat ${i}-ORT*bed | sort -k1,1 -k2,2n | bedtools merge -d 30 | awk ' $3-$2 > 100 {print $0"\t"$1":"$2"-"$3 }' > ${i}_ALL.bed
    
    #Keep only UCE/USCO identified
    bedtools intersect -wb -a ${i}_corresp -b ${i}_ALL.bed | bedtools merge -c 4,8 -o distinct,distinct | awk '{print $5"\t"$4}' | sort > ${i}_ALL_uce_usco.bed

    done

#Extract consensus sequence per individual and loci

for i in Genome_ref1 Genome_ref2
    do
    grep ${i} list_sample_mapping > temp
    while read a
        do
        file=$(echo ${i}-${a}_q20_rg_sorted)

        #Get complete chromosomes sequences
        samtools mpileup -A  -uf ../${i}*/${i}*.fasta ${file}.bam | bcftools call -c | bcftools filter -e 'DP<3' | vcfutils.pl vcf2fq > temp.fastq
        #From fastq to fasta
        seqtk seq -A -n N temp.fastq > temp2.fasta

        #Get UCE and USCO
        bedtools intersect -a ${i}_ALL_uce_usco.bed -b ${file}.bed  | awk '{print $4 }' | sort -u > temp_${file}_ALL.faidx
        samtools faidx temp2.fasta
        samtools faidx -r temp_${file}_ALL.faidx temp2.fasta > temp3_clean.fasta

        #Subseq seq > 100 bp
        seqtk comp temp3_clean.fasta | awk '$2-$9 >100 { print $1}' > temp_seq
        fastaselect.pl temp3_clean.fasta temp_seq > temp4_clean.fasta

        #Loci assignment
        grep ">" temp4_clean.fasta | cut -d">" -f2 > temp_headers
        join -a1 <(sort temp_headers) <(sort ${i}_ALL_uce_usco) | awk '{print ">"$1"\t>ORT_"$1"_"$2}' | sed -e "s/ORT/${a}/g" > temp_names
        corresp_fab.pl temp_names temp4_clean.fasta > ${i}-${a}_contigs.fasta
        rm temp*

        done < temp

    done

### Obtain mitochondrial genes

#Run mitofinder
for i in $(cat list_samples)
	do
	/mitofinder -j ${i} -1 clean_demux-${i}_R1_.paired.fastq -2 clean_demux-${i}_R2_.paired.fastq -r ortho_mito_ref.gb -o 5
	cp ${i}/${i}_MitoFinder_megahit_mitfi_Final_Results/${i}_final_genes_NT.fasta ALL_SAMPLES/${i}_mitofinder.fasta
	done

#Run BLAST 
makeblastdb -in reference_mito_final_selection.fasta -input_type fasta -title reference_mito_final_selection -dbtype nucl -parse_seqids -out reference_mito_final_selection
for i in $(cat list_samples)
    do
    #qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore
    ln -s ../${i}_contigs_clean.fasta .
    blastn -query ${i}_contigs_clean.fasta -db reference_mito_final_selection -evalue 1e-6 -outfmt 6 -out ${i}_blast_mito_output.txt
    done


# Obtain mitochondrial sequences, avoiding those with stop codons (representing numts)

grep ">" reference_mito_final_selection.fasta | cut -d":" -f1 | cut -d">" -f2 | sort -u > list_genes

for i in $(cat list_samples)
    do

    while read a
        do
        #Get contigs with BLAST on mito
        #qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore
        grep ${a} ${i}_blast_mito_output.txt | cut -f1 | sort -u > temp_contigs

        if [ -s temp_contigs ]; then
            
            while read b
                do
                #Define BLAST region + 50 bp
                grep ${a} ${i}_blast_mito_output.txt | grep ${b} | sort -n -k4,4 | tail -n1 > temp_line
                initialbase=$(( $( cut -f7 temp_line ) -50 ))
                if [ $initialbase -lt 1 ]; then
                    initialbase=$(echo 1)
                    fi
                lastbase=$(( $( cut -f8 temp_line ) +50 ))
            
                
                #Extract that region
                samtools faidx ${i}_contigs_clean.fasta $b:$initialbase-$lastbase | sed -e "s/>.*$/>$b:$initialbase-$lastbase/g" >> temp_${a}

                done < temp_contigs

            if [ -s temp_${a} ]; then
                #Extract all ORFs
                getorf -find 3 -table 5 -sequence temp_${a} -outseq temp_${i}_ORF_${a}.fasta

                #BLAST on reference
                blastn -query temp_${i}_ORF_${a}.fasta -db reference_mito_final_selection -evalue 1e-6 -outfmt 6 -out temp_${i}_ORF_${a}_mito_output.txt

                #Choose best contig
                awk '{ print $0, $3 * $4 }' temp_${i}_ORF_${a}_mito_output.txt | sort -n -k12,12 | tail -n1 | cut -d":" -f1 >> ${i}_corresp_MITO_ORF
                tail -n1 ${i}_corresp_MITO_ORF | cut -f 1 > temp_seq
                fastaselect.pl temp_${i}_ORF_${a}.fasta temp_seq > temp_seq.fasta
                sed "s/>.*$/>${i}-${a}/g" temp_seq.fasta >> ${i}_mito_loci_ORF.fasta
                fi
                rm temp*
            fi
        done < list_genes
    
    done

for i in $(cat list_samples)
    do
    cat ${i}_mito_loci_ORF.fasta ${i}_mitofinder.fasta > ${i}_MITO.fasta
    done

### COI barcode

#Retrieve the CO1 sequence from the alignment using a reference from BOLD
for j in Genome_ref1 Genome_ref2
    do
    #BLAST
    makeblastdb -in locus_mito_COI.fasta -input_type fasta -title locus_mito_COI -dbtype nucl -parse_seqids -out locus_mito_COI
    blastn -query ../References/${j}_CO1_ref.fasta -db locus_mito_COI -outfmt 6  -evalue 1e+500 -out locus_mito_COI_output_blast.txt
    #BEST hit
    for i in $(grep ">" locus_mito_COI.fasta | cut -d ">" -f2| cut -d"-" -f1,2 | cut -d"_" -f1 | sort -u)
        do
        #genus=$(grep -a ${i} ../../../../All_samples_metadata.txt | cut -f12 | cut -d"_" -f1)
        #if grep -q ${genus} locus_mito_COI_output_blast.txt
                #then
                #grep $genus locus_mito_COI_output_blast.txt | grep ${i} | awk ' $4<900 && $4>300 {print $2,$3*$4,$9,$10}' | sort -k2,2 -n | tail -n1 | awk '{print $1"\t"$3"\t"$4}' >> temp.bed

                #else
                #grep ${i} locus_mito_COI_output_blast.txt | awk ' $4<800 && $4>300 {print $2,$3*$4,$9,$10}' | sort -k2,2 -n | tail -n1 | awk '{print $1"\t"$3"\t"$4}' >> temp.bed
                grep ${i} locus_mito_COI_output_blast.txt | awk ' $4<1000 && $4>300 {print $2,$3*$4,$9,$10}' | sort -k2,2 -n | tail -n1 | awk '{print $1"\t"$3"\t"$4}' >> temp.bed

                #fi
        done

    bedtools getfasta -fi locus_mito_COI.fasta -bed temp.bed > temp.fasta
    paste <(grep ">" temp.fasta) <(grep ">" temp.fasta) | cut -d":" -f1,2 > temp_corresp
    corresp_fab.pl temp_corresp temp.fasta > locus_mito_COI_barcode.fasta
    done


### Obtain ribosomal DNA 

#Assembly of samples
for i in $(cat list_samples) 
    do
    #Assembly
    spades.py -1 clean_demux-${i}_R1_.paired.fastq -2 clean_demux-${i}_R2_.paired.fastq -o ${i}
    cp ${i}/contigs.fasta CONTIGS_GOOD_CLEANING/${i}_contigs.fasta  
    cd CONTIGS_GOOD_CLEANING
    #Keep those longer than 100 bp
    grep ">" ${i}_contigs.fasta | awk -F"_" '{if ($4 >99) print $0}' | cut -d">" -f2 > temp_seq_100
    fastaselect.pl ${i}_contigs.fasta temp_seq_100 > ${i}_contigs_clean.fasta
    cd ..
    done

#Identify contigs corresponding to the rDNA

for i in $(cat list_samples)
    do

    blastn -query ../${i}_contigs_clean.fasta -db reference_genomes_rDNA -evalue 1e-6 -outfmt 6 -out ${i}_blast_rDNA_output.txt
    awk '{ if ( $3 > 90 ) print $0}' ${i}_blast_rDNA_output.txt > temp_blast.txt
    cut -d"_" -f1-6 temp_blast.txt | sort | uniq | sed -e "s/^/${i}-/" >> corresp_contig_rDNA.txt
    cut -f1 ${i}_blast_rDNA_output.txt | sort | uniq > ${i}_blast_rDNA_output_contigs
    ln -s ../${i}_contigs_clean.fasta .
    fastaselect.pl ${i}_contigs_clean.fasta ${i}_blast_rDNA_output_contigs > ${i}_blast_rDNA_output_contigs.fasta
    done


#First RagTag using Meconema thalassinum or Vandiemenella viatica
mkdir RAGTAG1
cd RAGTAG1
mkdir ALL_SAMPLES_1

for i in $(cat ../list_samples)
    do
    sub_order=$(grep -a ${i} All_samples_metadata.txt | grep -ho "[[:alpha:]]*fera")
    echo ${sub_order}
    #First RagTag
    if [ ${sub_order} = Ensifera ]  
    then 
        ragtag.py scaffold ${folder}/rDNA_Meco_tha_complete.fasta ${folder}/${i}_blast_rDNA_output_contigs.fasta -o ${i}
    
    else
        ragtag.py scaffold ${folder}/rDNA_Vandi_vi_complete.fasta ${folder}/${i}_blast_rDNA_output_contigs.fasta -o ${i}
    fi

    #Copy to ALL_SAMPLES_1
    cp ${i}//ragtag.scaffold.fasta ALL_SAMPLES_1/${i}_rDNA_scaffold.fasta


done

#Second RagTag
cd ..
mkdir RAGTAG2
cd RAGTAG2
mkdir ALL_SAMPLES_2
mkdir NEW_REF_FAM

#Find best reference per family 

cat All_samples_metadata.txt | grep -ho "[[:alpha:]]*dae" | sort | uniq > list_families


for j in $(cat list_families)
    do
    grep -a ${j} All_samples_metadata.txt | cut -f1 | sort | uniq > list_samples_fam_${j}

    grep -Ff list_samples_fam_${j}  ../RAGTAG1/ALL_SAMPLES_1/Summary_length_Nbal_1 > temp_criteria

    #Criteria: 3 with less N, the longest

    BEST_IND_FAM=$(cat temp_criteria | sort -nr -k3 | tail -n3 | sort -n -k2 | tail -n1 | cut -d" " -f1)
    
    cp ../RAGTAG1/ALL_SAMPLES_1/${BEST_IND_FAM}_rDNA_scaffold_clean.fasta NEW_REF_FAM/${j}_${BEST_IND_FAM}_rDNA_scaffold_clean.fasta

    for i in $(cat list_samples_fam_${j})
        do
        ragtag.py scaffold NEW_REF_FAM/${j}_${BEST_IND_FAM}_rDNA_scaffold_clean.fasta ${folder}/${i}_blast_rDNA_output_contigs.fasta -o ${i}
            
        #Copy to ALL_SAMPLES_2
        cp ${i}/ragtag.scaffold.fasta ALL_SAMPLES_2/${i}_rDNA_scaffold.fasta
        
        done
    done
